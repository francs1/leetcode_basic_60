#https://leetcode-cn.com/problems/hamming-distance/

class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        z = x ^ y#求x与y的按位异或(x与y相同则异或为0，x与y不同则异或为1)
        cnt = 0#存储最终结果
        mask = 1#定义掩码0000 0000 0000 0000 0000 0000 0000 0001
        for i in range(31):
            t = z & mask#掩码与异或结果求按位与，就是计算当前位是否为1
            if t != 0:#如果按位与不等于0，则表示异或值为1，也就是x与y对应为不同
                cnt += 1#汉明距离+1
            mask <<= 1#移动掩码位0000 0000 0000 0000 0000 0000 0000 0010
        return cnt

if __name__ == '__main__':
    S = Solution()
    result = S.hammingDistance(5,12)
    print(result)

'''
分析：x=1 , y=4
x的二进制表示为0000 0001
y的二进制表示为0000 0100
x与y的异或值为:1111 1010

有多种方法来判断这个值有多少个二进制为是0，
掩码是比较高效的一种方式
让     1111 1010
按位与  0000 0001
结果是  0000 0000
得到最后一位的按位与的结果0，则表示远原来是0，因为0与1等于0.

接下来移动掩码
让     1111 1010
按位与  0000 0010
结果是  0000 0010
第二倒数第二位的按位与结果不等于0，则表示原来是1，因为1与1等于1.

如此类推，一直循环到第2的31次方位。出现多少次非零，就说明原来异或有多少个1，
原来异或等于1的位，就表示x与y在这个位上不同，也就是汉明距离的值。
'''